openapi: 3.0.3
info:
  title: Pet Sitter API
  version: "0.1"
servers:
- url: /api
security:
- SessionToken: []
tags:
- name: Users
  description: Operations related to users
- name: Jobs
  description: Operations related to jobs
paths:
  /session:
    post:
      tags:
      - Users
      summary: Create a new session
      operationId: startSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/session_body"
      responses:
        "200":
          description: Session created successfully
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
      security: []
      x-swagger-router-controller: Users
  /users:
    post:
      tags:
      - Users
      summary: Create a new user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          description: User created successfully
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
      security: []
      x-swagger-router-controller: Users
  /users/{id}:
    get:
      tags:
      - Users
      summary: Get user by ID
      operationId: viewUserWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      x-swagger-router-controller: Users
    put:
      tags:
      - Users
      summary: Update user by ID
      operationId: modifyUserWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      x-swagger-router-controller: Users
    delete:
      tags:
      - Users
      summary: Delete user by ID
      operationId: deleteUserWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: User deleted successfully
      x-swagger-router-controller: Users
  /users/{id}/jobs:
    get:
      tags:
      - Users
      summary: Get jobs created by user
      operationId: listJobsForUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of jobs created by user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
      x-swagger-router-controller: Users
  /users/{id}/job-applications:
    get:
      tags:
      - Users
      summary: Get job applications made by user
      operationId: listJobApplicationsForUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of job applications made by user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_1"
              examples:
                two-items:
                  summary: Example with two job applications
                  value:
                    items:
                    - id: 1
                      job_id: 123
                      user_id: 345
                      status: PENDING
                    - id: 2
                      job_id: 123
                      user_id: 456
                      status: COMPLETE
                empty:
                  summary: Example with no job applications
                  value:
                    items: []
                many:
                  summary: Example with many job applications
                  value:
                    items:
                    - id: 1
                      job_id: 123
                      user_id: 345
                      status: COMPLETE
                    - id: 2
                      job_id: 123
                      user_id: 456
                      status: PENDING
                    - id: 3
                      job_id: 123
                      user_id: 567
                      status: PENDING
                    - id: 4
                      job_id: 123
                      user_id: 678
                      status: PENDING
                    - id: 5
                      job_id: 123
                      user_id: 789
                      status: COMPLETE
                    - id: 6
                      job_id: 123
                      user_id: 890
                      status: PENDING
                    - id: 7
                      job_id: 123
                      user_id: 901
                      status: COMPLETE
                    - id: 8
                      job_id: 123
                      user_id: 234
                      status: PENDING
                    - id: 9
                      job_id: 123
                      user_id: 345
                      status: COMPLETE
                    - id: 10
                      job_id: 123
                      user_id: 456
                      status: PENDING
                    - id: 11
                      job_id: 123
                      user_id: 567
                      status: COMPLETE
      x-swagger-router-controller: Users
  /jobs:
    get:
      tags:
      - Jobs
      summary: Get all jobs
      operationId: listAllJobs
      parameters:
      - name: start_time_before
        in: query
        description: Filter jobs that start before this time
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: start_time_after
        in: query
        description: Filter jobs that start after this time
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: end_time_before
        in: query
        description: Filter jobs that end before this time
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: end_time_after
        in: query
        description: Filter jobs that end after this time
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: activity
        in: query
        description: "Filter jobs by activity type (e.g., walk, feeding, grooming)"
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pets
        in: query
        description: "Filter jobs by pet type (e.g., dog, cat)"
        required: false
        style: deepObject
        explode: false
        schema:
          $ref: "#/components/schemas/pets"
      responses:
        "200":
          description: List of jobs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
              examples:
                with-some-data:
                  summary: Example with some data
                  value:
                    items:
                    - id: 123
                      creator_user_id: 345
                      start_time: 2023-10-01T10:00:00Z
                      end_time: 2023-10-01T12:00:00Z
                      activity: walk
                      dog:
                        name: Fido
                        size: medium
                        breed: Doberman
                        age: 3
                    - id: 234
                      creator_user_id: 456
                      start_time: 2023-10-02T14:00:00Z
                      end_time: 2023-10-02T16:00:00Z
                      activity: feeding
                      dog:
                        name: Max
                        size: small
                        breed: Beagle
                        age: 5
                    - id: 345
                      creator_user_id: 567
                      start_time: 2023-10-03T08:00:00Z
                      end_time: 2023-10-03T10:00:00Z
                      activity: grooming
                      dog:
                        name: Bella
                        size: large
                        breed: Labrador
                        age: 2
      x-swagger-router-controller: Jobs
    post:
      tags:
      - Jobs
      summary: Create a new job
      operationId: createJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Job"
        required: true
      responses:
        "201":
          description: Job created successfully
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
      x-swagger-router-controller: Jobs
  /jobs/{id}:
    get:
      tags:
      - Jobs
      summary: Get job by ID
      operationId: viewJobWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Job found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
      x-swagger-router-controller: Jobs
    put:
      tags:
      - Jobs
      summary: Update job by ID
      operationId: modifyJobWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Job"
        required: true
      responses:
        "200":
          description: Job updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
      x-swagger-router-controller: Jobs
    delete:
      tags:
      - Jobs
      summary: Delete job by ID
      operationId: deleteJobWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Job deleted successfully
      x-swagger-router-controller: Jobs
  /jobs/{id}/job-applications:
    get:
      tags:
      - Jobs
      summary: Get all job applications for a job
      operationId: viewApplicationsForJob
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of job applications for the job
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_1"
              examples:
                two-items:
                  summary: Example with two job applications
                  value:
                    items:
                    - id: 1
                      job_id: 123
                      user_id: 345
                      status: PENDING
                    - id: 2
                      job_id: 123
                      user_id: 456
                      status: COMPLETE
                empty:
                  summary: Example with no job applications
                  value:
                    items: []
                many:
                  summary: Example with many job applications
                  value:
                    items:
                    - id: 1
                      job_id: 123
                      user_id: 345
                      status: COMPLETE
                    - id: 2
                      job_id: 123
                      user_id: 456
                      status: PENDING
                    - id: 3
                      job_id: 123
                      user_id: 567
                      status: PENDING
                    - id: 4
                      job_id: 123
                      user_id: 678
                      status: PENDING
                    - id: 5
                      job_id: 123
                      user_id: 789
                      status: COMPLETE
                    - id: 6
                      job_id: 123
                      user_id: 890
                      status: PENDING
                    - id: 7
                      job_id: 123
                      user_id: 901
                      status: COMPLETE
                    - id: 8
                      job_id: 123
                      user_id: 234
                      status: PENDING
                    - id: 9
                      job_id: 123
                      user_id: 345
                      status: COMPLETE
                    - id: 10
                      job_id: 123
                      user_id: 456
                      status: PENDING
                    - id: 11
                      job_id: 123
                      user_id: 567
                      status: COMPLETE
      x-swagger-router-controller: Jobs
    put:
      tags:
      - Jobs
      summary: Update job application status
      operationId: modifyJobApplicationWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update the status of a job application
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobApplication"
      responses:
        "200":
          description: Job application status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobApplication"
      x-swagger-router-controller: Jobs
    post:
      tags:
      - Jobs
      summary: Create a new job application
      operationId: createJobApplication
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobApplication"
      responses:
        "201":
          description: Job application created successfully
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
      x-swagger-router-controller: Jobs
components:
  schemas:
    Session:
      type: object
      properties:
        user_id:
          type: string
        auth_header:
          type: string
      example:
        user_id: user_id
        auth_header: auth_header
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        password:
          type: string
        full_name:
          type: string
        roles:
          type: array
          items:
            type: string
      example:
        password: password
        full_name: full_name
        roles:
        - roles
        - roles
        id: id
        email: email
    Job:
      type: object
      properties:
        id:
          type: string
        creator_user_id:
          type: string
        start_time:
          type: string
        end_time:
          type: string
        activity:
          type: string
        pets:
          type: array
          items:
            $ref: "#/components/schemas/Pet"
      example:
        creator_user_id: creator_user_id
        pets:
        - ""
        - ""
        start_time: start_time
        activity: activity
        end_time: end_time
        id: id
    Pet:
      allOf:
      - type: object
        properties:
          name:
            type: string
          age:
            type: string
      - discriminator:
          propertyName: species
          mapping:
            dog: "#/components/schemas/Dog"
            cat: "#/components/schemas/Cat"
        oneOf:
        - $ref: "#/components/schemas/Dog"
        - $ref: "#/components/schemas/Cat"
    Dog:
      allOf:
      - $ref: "#/components/schemas/Pet"
      - required:
        - species
        type: object
        properties:
          species:
            type: string
          size:
            type: string
          breed:
            type: string
    Cat:
      allOf:
      - $ref: "#/components/schemas/Pet"
      - required:
        - species
        type: object
        properties:
          species:
            type: string
          breed:
            type: string
    JobApplication:
      type: object
      properties:
        id:
          type: string
        job_id:
          type: string
        user_id:
          type: string
        status:
          type: string
      example:
        user_id: user_id
        job_id: job_id
        id: id
        status: status
    session_body:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    inline_response_200:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Job"
      example:
        items:
        - creator_user_id: creator_user_id
          pets:
          - ""
          - ""
          start_time: start_time
          activity: activity
          end_time: end_time
          id: id
        - creator_user_id: creator_user_id
          pets:
          - ""
          - ""
          start_time: start_time
          activity: activity
          end_time: end_time
          id: id
    inline_response_200_1:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/JobApplication"
      example:
        items:
        - user_id: user_id
          job_id: job_id
          id: id
          status: status
        - user_id: user_id
          job_id: job_id
          id: id
          status: status
    pets:
      type: object
      properties:
        age_below:
          type: integer
          description: Filter pets by age below this value
        age_above:
          type: integer
          description: Filter pets by age above this value
        species:
          type: string
          description: "Return only pets with this species. Provide multiple species\
            \ as a comma-separated list (e.g., dog,cat)"
  securitySchemes:
    SessionToken:
      type: apiKey
      name: Authorization
      in: header
